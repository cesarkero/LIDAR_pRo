source("00_Base.R")
lasdir <- choose_folder(caption = "Select las dir:") #select dir to las or laz
output <- choose_folder(caption = "Select output dir:") #output dir
source("00_Base.R")
lasdir <- choose_folder(caption = "Select las dir:") #select dir to las or laz
output <- choose_folder(caption = "Select output dir:") #output dir
files <- list.files(lasdir, pattern="*.LAZ|*.LAS", full.names=T, recursive = T) #creates a list of files
files
#Read and display a catalog of las files
lascat <- catalog(lasdir)
delaunay <- T
knnidw <- F
kriging <- F
res <- 0.5
las <- readLAS(files[1], filter = filt)
las[1]
lasfile[|]
lasfile <- files[1]
lasName <- tools::file_path_sans_ext(basename(lasfile)) #lasname
las <- readLAS(lasfile, filter = "-drop_z_below 0") #read and filter below 0 values
#methods for grid_terrain from fastest to slowest
method <- ifelse(method = 1, "delaunay", ifelse(method = 2, "knnidw", "kriging"))
method =1
las <- readLAS(lasfile, filter = "-drop_z_below 0") #read and filter below 0 values
#methods for grid_terrain from fastest to slowest
method <- ifelse(method = 1, "delaunay", ifelse(method = 2, "knnidw", "kriging"))
#methods for grid_terrain from fastest to slowest
method <- ifelse(method == 1, "delaunay", ifelse(method == 2, "knnidw", "kriging"))
method
DTM <- grid_terrain(las, res = res, method = method) # DTM
lasfile
res=1
method=1
lasName <- tools::file_path_sans_ext(basename(lasfile)) #lasname
las <- readLAS(lasfile, filter = "-drop_z_below 0") #read and filter below 0 values
#methods for grid_terrain from fastest to slowest
method <- ifelse(method == 1, "delaunay", ifelse(method == 2, "knnidw", "kriging"))
DTM <- grid_terrain(las, res = res, method = method) # DTM
# DEM
lasnormalize(las,mdt)
# DEM
lasnormalize(las,DTM)
DEM <- grid_canopy(las, res = res)
retur <- list(DTM,DEM)
retur
source("00_Base.R")
source("00_Base.R")
source("00_Base.R")
lasdir <- choose_folder(caption = "Select las dir:") #select dir to las or laz
output <- choose_folder(caption = "Select output dir:") #output dir
files <- list.files(lasdir, pattern="*.LAZ|*.LAS", full.names=T, recursive = T) #creates a list of files
lapply(files, TSE, res = 5, method = 1, epsg = "+init=epsg:25829" )
Rasters <- lapply(files, TSE, res = 5, method = 1, epsg = "+init=epsg:25829" )
# Export DTMs
DTMs <- pblapply(Rasters, '[[', 1) #lista de elementos en posicion 1 de cada sublista
source("00_Base.R")
# Export DTMs
DTMs <- pblapply(Rasters, '[[', 1) #lista de elementos en posicion 1 de cada sublista
DTMs
DTMs <- DTMs[!is.na(DTMs)] #remove NA shp
source("00_Base.R")
lasdir <- choose_folder(caption = "Select las dir:") #select dir to las or laz
output <- choose_folder(caption = "Select output dir:") #output dir
files <- list.files(lasdir, pattern="*.LAZ|*.LAS", full.names=T, recursive = T) #creates a list of files
Rasters <- lapply(files, TSE, res = 5, method = 1, epsg = "+init=epsg:25829" )
# Export DTMs
DTMs <- pblapply(Rasters, '[[', 2) #lista de elementos en posicion 1 de cada sublista
DTMs <- DTMs[!is.na(DTMs)] #remove NA shp
DTMs
# Filenames
TSEnames <- pblapply(Rasters, '[[', 1) #lista de elementos en posicion 1 de cada sublista
TSEnames
source("00_Base.R")
lasdir <- choose_folder(caption = "Select las dir:") #select dir to las or laz
output <- choose_folder(caption = "Select output dir:") #output dir
files <- list.files(lasdir, pattern="*.LAZ|*.LAS", full.names=T, recursive = T) #creates a list of files
Rasters <- lapply(files, TSE, res = 5, method = 1, epsg = "+init=epsg:25829" )
source("00_Base.R")
lasdir <- choose_folder(caption = "Select las dir:") #select dir to las or laz
output <- choose_folder(caption = "Select output dir:") #output dir
files <- list.files(lasdir, pattern="*.LAZ|*.LAS", full.names=T, recursive = T) #creates a list of files
Rasters <- lapply(files, TSE, res = 1, method = 1, epsg = "+init=epsg:25829" )
plot (Rasters[[2]])
plot (Rasters[2])
Rasters
Rasters[[2]][4]
plot(Rasters[[2]][4])
plot(Rasters[[2]][[4]])
files2 <- catalog(lasdir)
lasdir
files.cat <- catalog(files)
files.cat <- catalog(lasdir)
lasdir
files.cat <- catalog(lasdir)
files.cat
#using catalog_apply
Rasters.cat <- catalog_apply(files.cata, TSE, res = 1, method = 1, epsg = "+init=epsg:25829" )
#using catalog_apply
Rasters.cat <- catalog_apply(files.cat, TSE, res = 1, method = 1, epsg = "+init=epsg:25829" )
files.cat
files.cat[|]
files.cat[1]
files.cat
source("00_Base.R")
lasdir <- choose_folder(caption = "Select las dir:") #select dir to las or laz
output <- choose_folder(caption = "Select output dir:") #output dir
files <- list.files(lasdir, pattern="*.LAZ|*.LAS", full.names=T, recursive = T) #creates a list of files
files.cat <- catalog(lasdir)
plot(files.cat)
#TreeTops
Trees <- catalog_apply(files.cat, TreeTops, ws=1)
files.cata
files.cat
#TreeTops
Trees <- catalog_apply(files.cat, TreeTops, ws=1)
#TreeTops
opt <- list(need_buffer = TRUE)
#TreeTops
# For this dummy example, the chunk size is 80 m and the buffer is 10 m using a single core.
opt_chunk_buffer(files.cat) <- 10
files.cat <- catalog(lasdir)
#TreeTops
# For this dummy example, the chunk size is 80 m and the buffer is 10 m using a single core.
opt_chunk_buffer(files.cat) <- 10
opt_cores(files.cat)        <- 1L
opt_chunk_size(files.cat)   <- 80            # small because this is a dummy example.
opt_select(files.cat)       <- "xyz"         # read only the coordinates.
opt_filter(files.cat)       <- "-keep_first" # read only first returns.
#TreeTops
# For this dummy example, the chunk size is 80 m and the buffer is 10 m using a single core.
files.cat
#TreeTops
# For this dummy example, the chunk size is 80 m and the buffer is 10 m using a single core.
?catalog
files.cat <- catalog(lasdir, buffer = 10, cores = 2)
files.cat <- catalog(lasdir, buffer = 10, cores = 2)
class(files.cata)
class(files.cata)
class(files.cat)
