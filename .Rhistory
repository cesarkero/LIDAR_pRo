head(r1[,1:10])
r3 <- RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 10, seed = 42)
r4 <- RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 10, seed = 42
r4 <- RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 10, seed = 42)
RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 1000)
class(RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 1000))
10
10
10
V <- c(rep(0, 3), rep(1, 10))
n <- factorial(length(V)) # total number of unique possible permutations
n
N <- 100 # or 200, 300, 500... max 1000
permn(V)
V <- c(rep(0, 3), rep(1, 3))
n <- factorial(length(V)) # total number of unique possible permutations
n
N <- 100 # or 200, 300, 500... max 1000
permn(V)
class(permn(V))
class(unique(permn(V)))
class(RcppAlgos::permuteSample(0:1, freqs = c(3, 3), n = 1000))
class(RcppAlgos::permuteSample(0:1, freqs = c(3, 3), n = 10))
result <- RcppAlgos::permuteSample(0:1, freqs = c(3, 3), n = 10)
result
V <- c(rep(0, 3), rep(1, 3))
n <- factorial(length(V)) # total number of unique possible permutations
N <- integer(n/10) # or 200, 300, 500... max 1000
set.seed(123)
p <- sample(unique(permn(V)),N)
V <- c(rep(0, 3), rep(1, 3))
n <- factorial(length(V)) # total number of unique possible permutations
N <- 10 # or 200, 300, 500... max 1000
set.seed(123)
p <- sample(unique(permn(V)),N)
p
set.seed(123)
p2 <- RcppAlgos::permuteSample(0:1, freqs = c(3, 3), n = 10)
p2
V <- c(rep(0, 18), rep(1, 18))
n <- factorial(length(V)) # total number of unique possible permutations
N <- 100 # or 200, 300, 500... max 1000
set.seed(123)
p <- sample(unique(permn(V)),N)
p2 <- RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 100)
p2
V <- c(rep(0, 3), rep(1, 3))
n <- factorial(length(V)) # total number of unique possible permutations
N <- 10 # or 200, 300, 500... max 1000
set.seed(123)
p <- sample(unique(permn(V)),N)
p
library(plyr)
alply(result, 1)
as.list(data.frame(t(result)))
as.list(result)
result[1,]
result
result[1,]
result[2,]
dim(result)
dim(result)[1]
1:dim(result)[1]
r <- RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 100)
1:dim(r)[1]
nrow(r)
lapply(1:dim(r)[1], r[*,])
lapply(1:dim(r)[1], r[,])
lapply(1:dim(r)[1], function(x) {r[x,]})
dim(r)
r <- RcppAlgos::permuteSample(0:1, freqs = c(18, 18), n = 10)
dim(r)
lapply(1:dim(r)[1], function(x) {r[x,]})
gsub("(.{2,})\\1+","\\1",str)
str <- cdababcdcd
gsub("(.{2,})\\1+","\\1",str)
?gsub
gsub(a,"(.{2,})\\1+","\\1",str)
gsub("(.{2,})\\1+",a,"\\1",str)
gsub("(.{2,})\\1+","\\1",a)
a <- "aaa"
b <- "aaaa"       #expected aa
c <- "abababcdcd" #expected abcd
d <- "cdababcdcd" #expected cdabcd
gsub("(.{2,})\\1+","\\1",a)
gsub("(.{2,})\\1+","\\1",b)
gsub("(.{2,})\\1+","\\1",c)
gsub("(.{2,})\\1+","\\1",d)
gsub("(.{2,})\\1+","\\1",d, perl = T)
install.packages("spgrass6", dependencies = TRUE)
install.packages("ctv")
library("ctv")
install.views("Spatial")
install.views("Spatial")
#load libraries
library(spgrass6)
#load libraries
library(ctv)
library(spgrass6)
library(rgrass7)
library(rgdal)
?rgrass7
?spgrass6
setwd("C:/GitHub/LIDAR_pRo")
source("00_Base.R")
source("00_Base.R")
lasdir <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
output <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
#set catalog and global options
cat <- catalog(lasdir)
opt_chunk_buffer(cat) <- 20 #change buffer size
opt_cores(cat) <- 3 #change cores option
opt_progress(cat) <- TRUE #see progress
opt_laz_compression(cat) <- TRUE #laz compression
#MDT PROCESS
MDT_output <- paste0(output,"/MDT/")
opt_output_files(cat) <- paste0(MDT_output,"{ORIGINALFILENAME}") #set filepaths
MDT <- grid_terrain(cat, res = 1, algorithm = "knnidw"(k = 5, p = 2))
#hillshade for MDT
slope = terrain(MDT, opt='slope')
aspect = terrain(MDT, opt='aspect')
MDT_hs = hillShade(slope, aspect, 40, 270)
#export raster files
writeRaster(MDT_hs,
filename=paste(output,"/", "grid_terrain_hs.tif", sep=''),
datatype="FLT4S",
overwrite=T)
#MDE PROCESS
MDE_output <- paste0(output,"/MDE/")
opt_output_files(cat) <- paste0(MDE_output,"{ORIGINALFILENAME}") #set filepaths
# Basic triangulation and rasterization of first returns
MDE <- grid_canopy(cat, res = 1, dsmtin())
# Khosravipour et al. pitfree algorithm
# MDE <- grid_canopy(cat, res = 1, pitfree(c(0,2,5,10,15), c(0, 1.5)))
#hillshade for MDE
slope = terrain(MDE, opt='slope')
aspect = terrain(MDE, opt='aspect')
MDE_hs = hillShade(slope, aspect, 40, 270)
#export raster files
writeRaster(MDE_hs,
filename=paste(output,"/", "grid_terrain_hs.tif", sep=''),
datatype="FLT4S",
overwrite=T)
# MDS PROCESS
MDS_output <- paste0(output,"/MDS/")
output <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
# MDS PROCESS
MDS_output <- paste0(output,"/MDS/")
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
source("00_Base.R")
lasdir <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
output <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
#set catalog and global options
cat <- catalog(lasdir)
opt_chunk_buffer(cat) <- 20 #change buffer size
opt_cores(cat) <- 3 #change cores option
opt_progress(cat) <- TRUE #see progress
opt_laz_compression(cat) <- TRUE #laz compression
#-------------------------------------------------------------------------------
# MDS PROCESS
MDS_output <- paste0(output,"/MDS/")
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
# Normalization
MDS <- lasnormalize(cat, tin())
cat[[1]]
cat[1]]
cat[1]
cat[1]
cat[1]
cat[1]
cat[1,]
# Normalization
MDS <- lasnormalize(cat[1,], tin())
# Method 1: point to raster
MDS1 = grid_canopy(MDS, 0.5, p2r())
plot(MDS, col = height.colors(50))
# Method 2: point to raster replacing each return by a disc of x dimensions
MDS2 = grid_canopy(MDS, 0.5, p2r(0.2))
plot(MDS2, col = height.colors(50))
# Method 2: point to raster replacing each return by a disc of x dimensions
MDS2 = grid_canopy(MDS, 0.5, p2r(0.2))
MDS
# Method 2: point to raster replacing each return by a disc of x dimensions
MDS2 = grid_canopy(MDS, 1, p2r(0.2))
plot(MDS2, col = height.colors(50))
MDS6 = grid_canopy(MDS, 1, pitfree(c(0,2,5,10,15), c(0,1), subcircle = 0.5))
# Method 4: interpolation from TIN
MDS4 = grid_canopy(MDS, 1, dsmtin())
# Method 4: interpolation from TIN
system.time({ MDS4 = grid_canopy(MDS, 1, dsmtin()) })
plot(MDS4, col = height.colors(50))
opt_output_files(cat) <- ""
# Benchmark
system.time({ MDS1 = grid_canopy(MDS, 1, p2r()) })
system.time({ MDS2 = grid_canopy(MDS, 1, p2r(0.5)) })
system.time({ MDS3 = grid_canopy(MDS, 0.5, p2r(0.5)) })
system.time({ MDS4 = grid_canopy(MDS, 1, dsmtin()) })
system.time({ MDS5 = grid_canopy(MDS, 1, pitfree(thresholds = c(0,2,5,10,15), max_edge = c(0,1))) })
system.time({ MDS6 = grid_canopy(MDS, 1, pitfree(c(0,2,5,10,15), c(0,1), subcircle = 0.5)) })
# Normalization
MDS <- lasnormalize(cat[1,], tin())
# Benchmark
opt_output_files(cat) <- paste0(MDS_output,"1") #set filepaths
system.time({ MDS1 = grid_canopy(MDS, 1, p2r()) })
opt_output_files(cat) <- paste0(MDS_output,"2") #set filepaths
system.time({ MDS2 = grid_canopy(MDS, 1, p2r(0.5)) })
opt_output_files(cat) <- paste0(MDS_output,"3") #set filepaths
system.time({ MDS3 = grid_canopy(MDS, 0.5, p2r(0.5)) })
opt_output_files(cat) <- paste0(MDS_output,"4") #set filepaths
system.time({ MDS4 = grid_canopy(MDS, 1, dsmtin()) })
opt_output_files(cat) <- paste0(MDS_output,"5") #set filepaths
system.time({ MDS5 = grid_canopy(MDS, 1, pitfree(thresholds = c(0,2,5,10,15), max_edge = c(0,1))) })
opt_output_files(cat) <- paste0(MDS_output,"6") #set filepaths
system.time({ MDS6 = grid_canopy(MDS, 1, pitfree(c(0,2,5,10,15), c(0,1), subcircle = 0.5)) })
# Normalization
MDS <- lasnormalize(cat[1,], tin())
# Normalization
Sys.time({MDS <- lasnormalize(cat[1,], tin())})
# Normalization
Sys.time({MDS = lasnormalize(cat[1,], tin())})
# Normalization
Sys.time({ MDS = lasnormalize(cat[1,], tin()) })
MDS <- lasnormalize(cat[1,], tin())
# Normalization
system.time({ MDS = lasnormalize(cat[1,], tin()) })
?catalog_retile
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 500
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,],)
cat_retile <- catalog_retile(cat[1,])
cat_retile
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
system.time({ MDS_retile <- lasnormalize(cat_retile, tin()) })
cat_retile
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
system.time({ MDS_retile <- lasnormalize(cat_retile, tin()) })
#Benchmark of normalization with previous retile
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 250
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
#Benchmark of normalization with previous retile
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 250
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
cat_retile
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
#Benchmark of normalization with previous retile
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 250
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
cat_retile
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 500
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
cat_retile
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
#Benchmark of normalization with previous retile
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
cat_retile
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
#Benchmark of normalization with previous retile
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
cat_retile
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
#Benchmark of normalization
system.time({ MDS = lasnormalize(cat[1,], tin()) })
cat
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
# Normalization
MDS <- lasnormalize(cat[1,], tin())
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
# Normalization
MDS <- lasnormalize(cat[1,], tin())
lasdir <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
output <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
res = 1
#set catalog and global options
cat <- catalog(lasdir)
cat
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
#Benchmark of normalization
system.time({
cat
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
#-------------------------------------------------------------------------------
# MDS PROCESS
MDS_output <- paste0(output,"/MDS/")
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
#-------------------------------------------------------------------------------
# MDS PROCESS
MDS_output <- paste0(output,"/MDS/")
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
cat
lasdir <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
output <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
res = 1
#set catalog and global options
cat <- catalog(lasdir)
opt_chunk_buffer(cat) <- 20 #change buffer size
opt_cores(cat) <- 3 #change cores option
opt_progress(cat) <- TRUE #see progress
opt_laz_compression(cat) <- TRUE #laz compression
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
# Normalization
MDS <- lasnormalize(cat[1,], tin())
lasdir <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
output <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
res = 1
#set catalog and global options
cat <- catalog(lasdir)
opt_chunk_buffer(cat) <- 20 #change buffer size
opt_cores(cat) <- 3 #change cores option
opt_progress(cat) <- TRUE #see progress
opt_laz_compression(cat) <- TRUE #laz compression
cat
summary(cat)
#-------------------------------------------------------------------------------
# MDS PROCESS
MDS_output <- paste0(output,"/MDS/")
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
summary(cat)
# Normalization
MDS <- lasnormalize(cat[1,], tin())
lasdir <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
output <- "C:/Users/cac/Google Drive/LIDAR/PNOA_2010_Lote5_CYL/CLA-CIR"
res = 1
#set catalog and global options
cat <- catalog(lasdir)
opt_chunk_buffer(cat) <- 20 #change buffer size
opt_cores(cat) <- 3 #change cores option
opt_progress(cat) <- TRUE #see progress
opt_laz_compression(cat) <- TRUE #laz compression
summary(cat)
MDS_output <- paste0(output,"/MDS/")
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
summary(cat)
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
summary(cat)
str(cat)
summary(cat[1,])
str(cat[1,])
MDS = lasnormalize(cat[1,], tin())
opt_output_files(cat[1,]) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat[1,]) <- 1000
opt_chunk_size(cat) <- 1000
summary(cat[1,])
str(cat[1,])
MDS = lasnormalize(cat[1,], tin())
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
summary(cat[1,])
str(cat[1,])
MDS = lasnormalize(cat[1,], tin())
})
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}_{ID}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
#Benchmark of normalization with previous retile
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 500
opt_output_files(cat) <- paste0(MDS_output,"{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
#Benchmark of normalization with previous retile
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 500
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}_{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}_{ID}") #set filepaths
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}_{ID}") #set filepaths
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
opt_output_files(cat) <- paste0(MDS_output,"{ORIGINALFILENAME}_{ID}") #set filepaths
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
#Benchmark of normalization
system.time({
opt_output_files(cat) <- paste0(MDS_output,"tile_{ID}") #set filepaths
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 1000
MDS = lasnormalize(cat[1,], tin())
})
#Benchmark of normalization with previous retile
system.time({
opt_chunk_buffer(cat) <- 10
opt_chunk_size(cat) <- 500
opt_output_files(cat) <- paste0(MDS_output,"tile_{ID}") #set filepaths
cat_retile <- catalog_retile(cat[1,])
opt_output_files(cat_retile) <- paste0(MDS_output,"{ORIGINALFILENAME}") #set filepaths
MDS_retile <- lasnormalize(cat_retile, tin())
})
